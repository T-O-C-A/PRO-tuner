name: Build & Release

on:
  push:
    branches: [ main ]
    tags:     [ 'v*.*.*' ]       # bij tags: echte release
  workflow_dispatch: {}           # handmatig starten kan

jobs:
  build:
    name: ${{ matrix.os }} build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # (Linux) paar system libs voor audio
      - name: Linux system deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsndfile1-dev libsamplerate0-dev

      # macOS & Linux: bash
      - name: Install deps (numpy first) • macOS/Linux
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install "numpy<2.0"          # aubio 0.4.9 breekt met NumPy 2.x
          pip install -r requirements.txt
          pip install pyinstaller

      # Windows: PowerShell
      - name: Install deps (numpy first) • Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install "numpy<2.0"
          pip install -r requirements.txt
          pip install pyinstaller

      # Vind automatisch het entrypoint (src/main.py, main.py, app/main.py, pro_tuner/main.py)
      - name: Determine entrypoint
        shell: bash
        run: |
          set -e
          if   [ -f src/main.py ]; then EP=src/main.py;
          elif [ -f main.py ]; then EP=main.py;
          elif [ -f app/main.py ]; then EP=app/main.py;
          elif [ -f pro_tuner/main.py ]; then EP=pro_tuner/main.py;
          else
            echo "❌ Geen entrypoint gevonden. Inhoud repo:"
            ls -la; echo "src/:"; ls -la src || true; echo "app/:"; ls -la app || true
            exit 1
          fi
          echo "ENTRYPOINT=$EP" >> "$GITHUB_ENV"
          echo "✅ ENTRYPOINT=$EP"

      # Build per OS met juiste shell
      - name: Build with PyInstaller • Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: pyinstaller --onefile --noconsole "$env:ENTRYPOINT" -n ProTuner

      - name: Build with PyInstaller • macOS/Linux
        if: runner.os != 'Windows'
        shell: bash
        run: pyinstaller --onefile --noconsole "$ENTRYPOINT" -n ProTuner

      # Package: Windows gebruikt Compress-Archive (geen 'zip' cmd), macOS/Linux gebruiken zip
      - name: Package artifact • Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist_pkg\assets\branding | Out-Null
          New-Item -ItemType Directory -Force -Path dist_pkg\assets\screenshots | Out-Null
          New-Item -ItemType Directory -Force -Path dist_pkg\instruments | Out-Null
          New-Item -ItemType Directory -Force -Path dist_pkg\presets | Out-Null
          Copy-Item -Recurse dist\ProTuner* dist_pkg\ -ErrorAction SilentlyContinue
          Copy-Item -Recurse assets\branding\*     dist_pkg\assets\branding\     -ErrorAction SilentlyContinue
          Copy-Item -Recurse assets\screenshots\*  dist_pkg\assets\screenshots\  -ErrorAction SilentlyContinue
          Copy-Item -Recurse instruments\*         dist_pkg\instruments\         -ErrorAction SilentlyContinue
          Copy-Item -Recurse presets\*             dist_pkg\presets\             -ErrorAction SilentlyContinue
          Copy-Item version.json,CHANGELOG.md,README.md,LICENSE dist_pkg\ -ErrorAction SilentlyContinue
          if (Test-Path dist_pkg\*) {
            Compress-Archive -Path dist_pkg\* -DestinationPath "PRO-tuner-${{ github.ref_name }}-windows.zip" -Force
          } else { Write-Error "dist_pkg is leeg"; exit 1 }

      - name: Package artifact • macOS/Linux
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          mkdir -p dist_pkg/assets/branding dist_pkg/assets/screenshots dist_pkg/instruments dist_pkg/presets
          cp -r dist/ProTuner* dist_pkg/ || true
          cp -r assets/branding/*      dist_pkg/assets/branding/    2>/dev/null || true
          cp -r assets/screenshots/*   dist_pkg/assets/screenshots/ 2>/dev/null || true
          cp -r instruments/*          dist_pkg/instruments/        2>/dev/null || true
          cp -r presets/*              dist_pkg/presets/            2>/dev/null || true
          cp version.json CHANGELOG.md README.md LICENSE dist_pkg/  2>/dev/null || true
          if [[ "$RUNNER_OS" == "macOS" ]]; then  zip -r "PRO-tuner-${{ github.ref_name }}-macos.zip"   dist_pkg; fi
          if [[ "$RUNNER_OS" == "Linux" ]]; then   zip -r "PRO-tuner-${{ github.ref_name }}-linux.zip"   dist_pkg; fi

      # Artefacts bij gewone runs (geen tag)
      - name: Upload artifacts (CI runs)
        if: github.ref_type != 'tag'
        uses: actions/upload-artifact@v4
        with:
          name: PRO-tuner-${{ matrix.os }}
          path: |
            PRO-tuner-*-windows.zip
            PRO-tuner-*-macos.zip
            PRO-tuner-*-linux.zip

      # Release assets bij tags
      - name: Release (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            PRO-tuner-*-windows.zip
            PRO-tuner-*-macos.zip
            PRO-tuner-*-linux.zip
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
